[/
Copyright (c) 2018 Nick Thompson
Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]


[section:quasi_monte_carlo Quasi Monte Carlo Quadrature]

[heading Synopsis]

    #include <boost/math/quadrature/quasi_monte_carlo.hpp>
    namespace boost{ namespace math{

    template<class F, class Real>
    class quasi_monte_carlo
    {

    };
    }} // namespaces

[heading Description]

The functional `quasi_monte_carlo` calculates the integral of a function /f/ using randomized quasi Monte-Carlo integration.
Some explanation is needed to unpack the phrase "randomized quasi-Monte Carlo integration".
A traditional Monte Carlo integration uses a pseudo-random sequence of quadrature nodes to produce an estimate of the integral.
Pseudo-random numbers (which, for our purposes can be thought of as truly random) tend to form "clumps"-small volumes which have a surprising number of quadrature nodes.

[" . . . a detailed analysis reveals that, in
Monte Carlo integration, it is not so much the true randomness of the samples
that is relevant, but rather that the samples should be spread in a uniform
manner over the integration domain.]--Harald Niederreiter



References:

Kocis, Ladislav, and William J. Whiten., ['Computational investigations of low-discrepancy sequences.], ACM Transactions on Mathematical Software (TOMS) 23.2 (1997): 266-294.

Owen, Art B., ['A randomized Halton algorithm in R], to appear (http://statweb.stanford.edu/~owen/reports/rhalton.pdf).

Niederreiter, Harald. ['Random number generation and quasi-Monte Carlo methods], Society for Industrial and Applied Mathematics, 1992.

[endsect]
