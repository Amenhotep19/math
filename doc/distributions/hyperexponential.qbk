[section:hyperexponential_dist Hyperexponential Distribution]

[import ../../example/hyperexponential_snips.cpp]

``#include <boost/math/distributions/hyperexponential.hpp>``

   namespace boost{ namespace math{

   template <typename RealTypr = double,
             typename ``__Policy``   = ``__policy_class`` >
   class hyperexponential_distribution;

   typedef hyperexponential_distribution<> hyperexponential;

   template <typename RealType, typename ``__Policy``>
   class hyperexponential_distribution
   {
   public:
      typedef RealType value_type;
      typedef Policy   policy_type;

      // Constructors:
      hyperexponential_distribution();
      template <typename ProbIterT, typename RateIterT>
      hyperexponential_distribution(ProbIterT prob_first, ProbIterT prob_last,
                                    RateIterT rate_first, RateIterT rate_last);
      template <typename ProbRangeT, typename RateRangeT>
      hyperexponential_distribution(ProbRangeT const& prob_range,
                                    RateRangeT const& rate_range,
                                    typename boost::disable_if<``['implementation-details]``>::type* = 0);
      template <typename RateIterT, typename RateIterT2>
      hyperexponential_distribution(RateIterT const& rate_first,
                                    RateIterT2 const& rate_last,
                                    typename boost::enable_if<``['implementation-details]``>::type* = 0);
      template <typename RateRangeT>
      hyperexponential_distribution(RateRangeT const& rate_range);
    #if !defined(BOOST_NO_CXX11_HDR_INITIALIZER_LIST)
      hyperexponential_distribution(std::initializer_list<RealType> l1, std::initializer_list<RealType> l2);
      hyperexponential_distribution(std::initializer_list<RealType> l1);
    #endif

      // Accessors:
      std::size_t num_phases() const;
      std::vector<RealType> probabilities() const;
      std::vector<RealType> rates() const;
   };

   }} // namespaces

The class type `hyperexponential_distribution` represents a [@http://en.wikipedia.org/wiki/Hyperexponential_distribution hyperexponential distribution].

A /k/-phase hyperexponential distribution is a [@http://en.wikipedia.org/wiki/Continuous_probability_distribution continuous probability distribution] obtained as a mixture of /k/ __exp_distrib.
It is also referred to as /mixed exponential distribution/ or parallel /k-phase exponential distribution/.

A /k/-phase hyperexponential distribution is characterized by two parameters, namely a /phase probability vector/ ['[*[alpha]]=([alpha][sub 1],...,[alpha][sub k])] and a /rate vector/ ['[*[lambda]]=([lambda][sub 1],...,[lambda][sub k])].

The [@http://en.wikipedia.org/wiki/Probability_density_function probability density function] for random variate /x/ in a hyperexponential distribution is given by:

[equation hyperexponential_pdf]

The following graph illustrates the PDF of the hyperexponential distribution with five different parameters, namely:

# ['[*[alpha]]=(1.0)] and ['[*[lambda]]=(1.0)] (which degenerates to a simple exponential distribution),
# ['[*[alpha]]=(0.1,0.9)] and ['[*[lambda]]=(0.5,1.5)],
# ['[*[alpha]]=(0.9,0.1)] and ['[*[lambda]]=(0.5,1.5)],
# ['[*[alpha]]=(0.2,0.3,0.5)] and ['[*[lambda]]=(0.5,1.0,1.5)],
# ['[*[alpha]]=(0.5,0.3,0.2)] and ['[*[lambda]]=(0.5,1.0,1.5)].

[graph hyperexponential_pdf]

[h3 Applications]

A /k/-phase hyperexponential distribution is frequently used in [@http://en.wikipedia.org/wiki/Queueing_theory queueing theory] to model the distribution of the superposition of /k/ independent events, like, for instance, the  service time distribution of a queueing station with /k/ servers in parallel where the /i/-th server is chosen with probability ['[alpha][sub i]] and its service time distribution is an exponential distribution with rate ['[lambda][sub i]] (Allen,1990; Papadopolous et al.,1993; Trivedi,2002).

For instance, CPUs service-time distribution in a computing system has often been observed to possess such a distribution (Rosin,1965).
Also, the arrival of different types of customer to a single queueing station is often modeled as a hyperexponential distribution (Papadopolous et al.,1993).
Similarly, if a product manufactured in several parallel assemply lines and the outputs are merged, the failure density of the overall product is likely to be hyperexponential (Trivedi,2002).

Finally, since the hyperexponential distribution exhibits a high Coefficient of Variation (CoV), that is a CoV > 1, it is especially suited to fit empirical data with large CoV (Feitelson,2014) and to approximate [@http://en.wikipedia.org/wiki/Long_tail long-tail probability distributions] (Feldmann et al.,1998).

[/
For instance, suppose that at the airport the company Foobar Airlines has a help desk with 3 different windows (servers) such that window A is for regional flights, window B is for international flights and window C is general customer care.
From previous studies, it has been observed that each window is able to serve requests with the following timings:
- window W1: 20 minutes, on average,
- window W2: 30 minutes, on average, and
- window W3: 10 minutes, on average.

Furthermore, another airline company has a help desk with a single window.
It has been observed that to the window can arrive three types of customers:
- customer C1 (e.g., premium customer):
- customer C2 (e.g., business customer):
- customer C3 (e.g., regular customer):
]

[h3 Related distributions]

* When the number of phases /k/ is equal to `1`, the hyperexponential distribution is simply an __exp_distrib.
* When the /k/ rates are all equal to ['[lambda]], the hyperexponential distribution is simple an __exp_distrib with rate ['[lambda]].

[h3 Examples]

Suppose a customer is buying an appliance and is choosing at random between an appliance with average lifetime of 10 years and an appliance with average lifetime of 12 years.
Assuming the lifetime of this appliance follows an exponential distribution, the lifetime distribution of the purchased appliance can be modeled as a hyperexponential distribution with
phase probability vector ['[*[alpha]]=(1/2,1/2)] and rate vector ['[*[lambda]]=(1/10,1/12)] (Wolfram,2014).

In the rest of this section, we provide a possible C++ implementation for computing the average lifetime and the probability that the appliance will work for more than 15 years.

[hyperexponential_snip1]

The resulting output is:

    Average lifetime: 11 years
    Probability that the appliance will work for more than 15 years: 0.254817


[h3 Member Functions]

[h4 Default Constructor]

      hyperexponential_distribution();

Constructs a /1/-phase hyperexponential distribution (i.e., an exponential distribution) with rate `1`.


[h4 Constructor from Iterators]

      template <typename ProbIterT, typename RateIterT>
      hyperexponential_distribution(ProbIterT prob_first, ProbIterT prob_last,
                                    RateIterT rate_first, RateIterT rate_last);

Constructs a hyperexponential distribution with /phase probability vector/ parameter given 
by the range defined by \[`prob_first`, `prob_last`) iterator pair, and /rate vector/ parameter 
given by the range defined by the \[`rate_first`, `rate_last`) iterator pair.

[h5 Parameters]

* `prob_first`, `prob_last`: the range of non-negative real elements representing the phase probabilities; if elements don't sum to `1`, they are normalized.
* `rate_first`, `rate_last`: the range of positive elements representing the rates.

[h5 Type Requirements]

[itemized_list [`ProbIterT`, `RateIterT`: must meet the requirements of the [@http://en.cppreference.com/w/cpp/concept/InputIterator InputIterator] concept.]]

[h5 Example]

[hyperexponential_snip2]

[h4 Construction from Ranges/Containers]

   template <typename ProbRangeT, typename RateRangeT>
   hyperexponential_distribution(ProbRangeT const& prob_range,
                                 RateRangeT const& rate_range,
                                 typename boost::disable_if<``['implementation-details]``>::type* = 0);

Constructs a hyperexponential distribution with /phase probability vector/ parameter 
given by the range defined by `prob_range`, and /rate vector/ parameter given by the range defined by `rate_range`.

[note The final `disable_if` parameter is an implementation detail that differentiates between this two argument constructor
and the iterator-based two argument constructor described below.]

[h5 Parameters]

* `prob_range`: the range of non-negative real elements representing the phase probabilities; if elements don't sum to `1`, they are normalized.
* `rate_range`: the range of positive real elements representing the rates.

[h5 Type Requirements]

[itemized_list [`ProbRangeT`, `RateRangeT`: must meet the requirements of the [@http://www.boost.org/doc/libs/release/libs/range/doc/html/range/concepts.html Range] concept:
that includes native C++ arrays, standard library containers, or a std::pair or iterators.]]

[h5 Examples]

[hyperexponential_snip3]
   
[h4 Construction with from iterators with equal phase probablities]

      template <typename RateIterT, typename RateIterT2>
      hyperexponential_distribution(RateIterT const& rate_first,
                                    RateIterT2 const& rate_last,
                                    typename boost::enable_if<``['implementation-details]``>::type* = 0);

Constructs a hyperexponential distribution with /rate vector/ parameter given by the range defined by the 
\[`rate_first`, `rate_last`) iterator pair, and /phase probability vector/ set to the equal phase 
probabilities (i.e., to a vector of the same length `n` of the /rate vector/ and with each element set to `1.0/n`).

[note The final `disable_if` parameter is an implementation detail that differentiates between this two argument constructor
and the iterator-based two argument constructor described below.]
[h5 Parameters]

* `rate_first`, `rate_last`: the range of positive elements representing the rates.

[h5 Type Requirements]

[itemized_list [`RateIterT`, `RateIterT2`: must meet the requirements of the [@http://en.cppreference.com/w/cpp/concept/InputIterator InputIterator] concept.]]

[h5 example]

[hyperexponential_snip4]

[h4 Construction from a single range (all phase probabilities equal)]

      template <typename RateRangeT>
      hyperexponential_distribution(RateRangeT const& rate_range);

Constructs a hyperexponential distribution with /rate vector/ parameter given by the range defined by `rate_range`, 
and /phase probability vector/ set to the equal phase probabilities (i.e., to a vector of the same length 
`n` of the /rate vector/ and with each element set to `1.0/n`).

[h5 Parameters]

* `rate_range`: the range of positive real elements representing the rates.

[h5 Type Requirements]

[itemized_list [`RateRangeT`: must meet the requirements of the [@http://www.boost.org/doc/libs/release/libs/range/doc/html/range/concepts.html Range] concept: this includes
native C++ array, standard library containers, and a `std::pair` of iterators.]]

[h5 Examples]

[hyperexponential_snip5]

[h4 Construction from Initializer lists]

      hyperexponential_distribution(std::initializer_list<RealType> l1, std::initializer_list<RealType> l2);

Constructs a hyperexponential distribution with /phase probability vector/ parameter 
given by the [@http://en.cppreference.com/w/cpp/language/list_initialization brace-init-list] defined by `l1`, 
and /rate vector/ parameter given by the [@http://en.cppreference.com/w/cpp/language/list_initialization brace-init-list] 
defined by `l2`.

[h5 Parameters]

* `l1`: the brace-init-list of non-negative real elements representing the phase probabilities; 
if elements don't sum to `1`, they are normalized.
* `l2`: the brace-init-list of positive real elements representing the rates.

[h5 Type Requirements]

[itemized_list [`ArgT`: must be a numeric type.]]

[h5 Example]

[hyperexponential_snip6]

[h4 Construction from a single initializer list (all phase probabilies equal)]

      hyperexponential_distribution(std::initializer_list<RealType> l1);

Constructs a hyperexponential distribution with /rate vector/ parameter given by the 
[@http://en.cppreference.com/w/cpp/language/list_initialization brace-init-list] defined by `l1`, and 
/phase probability vector/ set to the equal phase probabilities (i.e., to a vector of the same length 
`n` of the /rate vector/ and with each element set to `1.0/n`).

[h5 Parameters]

* `l1`: the brace-init-list of non-negative real elements representing the phase probabilities; if 
elements don't sum to `1`, they are normalized.

[h5 Type Requirements]

* `ArgT`: must be a numeric type.

[h5 Example]
   
[hyperexponential_snip7]

[h4 Accessors]

      std::size_t num_phases() const;

Gets the number of phases of this distribution.

[h5 Return Value] An non-negative integer number representing the number of phases of this distribution.


      std::vector<RealType> probabilities() const;

Gets the /phase probability vector/ parameter of this distribution.

[h5 Return Value] A vector of non-negative real numbers representing the /phase probability vector/ parameter of this distribution.


      std::vector<RealType> rates() const;

Gets the /rate vector/ parameter of this distribution.

[h5 Return Value] A vector of positive real numbers representing the /rate vector/ parameter of this distribution.


[h3 Non-member Accessor Functions]

All the [link math_toolkit.dist_ref.nmp usual non-member accessor functions] that are generic to all distributions are supported: __usual_accessors.

The formulae for calculating these are shown in the table below.


[h3 Accuracy]

The hyperexponential distribution is implemented in terms of the __exp_distrib and as such should have very small errors.


[h3 Implementation]

In the following table:

* ['[*[alpha]]=([alpha][sub 1],...,[alpha][sub k])] is the /phase probability vector/ parameter of the /k/-phase hyperexponential distribution,
* ['[*[lambda]]=([lambda][sub 1],...,[lambda][sub k])] is the /rate vector/ parameter of the /k/-phase hyperexponential distribution,
* /x/ is the random variate.

[table
[[Function][Implementation Notes]]
[[support][['x] [isin] \[0,[infin])]]
[[pdf][[equation hyperexponential_pdf]]]
[[cdf][[equation hyperexponential_cdf]]]
[[cdf complement][[equation hyperexponential_ccdf]]]
[[quantile][No closed form available. Computed numerically.]]
[[quantile from the complement][No closed form available. Computed numerically.]]
[[mean][[equation hyperexponential_mean]]]
[[variance][[equation hyperexponential_variance]]]
[[mode][`0`]]
[[skewness][[equation hyperexponential_skewness]]]
[[kurtosis][[equation hyperexponential_kurtosis]]]
[[kurtosis excess][kurtosis `- 3`]]
]


[h3 References]

* A.O. Allen, /Probability, Statistics, and Queuing Theory with Computer Science Applications, Second Edition/, Academic Press, 1990.

* D.G. Feitelson, /Workload Modeling for Computer Systems Performance Evaluation/, Cambridge University Press, 2014

*  A. Feldmann and W. Whitt, /Fitting mixtures of exponentials to long-tail distributions to analyze network performance models/, Performance Evaluation 31(3-4):245, doi:10.1016/S0166-5316(97)00003-5, 1998.

* H.T. Papadopolous, C. Heavey and J. Browne, /Queueing Theory in Manufacturing Systems Analysis and Design/, Chapman & Hall/CRC, 1993, p. 35.

* R.F. Rosin, /Determining a computing center environment/, Communications of the ACM 8(7):463-468, 1965.

* K.S. Trivedi, /Probability and Statistics with Reliability, Queueing, and Computer Science Applications/, John Wiley & Sons, Inc., 2002.

* Wolfram Mathematica, /Hyperexponential Distribution/, Online: [@http://reference.wolfram.com/language/ref/HyperexponentialDistribution.html], 2014.

* Wikipedia, /Hyperexponential Distribution/, Online: [@http://en.wikipedia.org/wiki/Hyperexponential_distribution], 2014

[endsect][/section:hyperexponential_dist hyperexponential]

[/ hyperexponential.qbk
  Copyright 2014 Marco Guazzone (marco.guazzone@gmail.com)
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]
